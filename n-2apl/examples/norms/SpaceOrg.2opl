Facts:

%RA
norm(
    sanction_group(ra),
    RA, // the subject agent
    ( ra(ra), sanction(Group,Sanction)), // precondition
    obligation([atleast(agent_sanctions(g),Sanction)],now+15,[reduce(RA,Sanction)]) // prohibition format
    ).    
     
%group
norm(
    group_action(Group),
    Group, // the subject agent
    ( group(Group)), // precondition - left blank for now
    obligation([atleast(agent_sanctions(g),Sanction)],now+15,[sanction_group(Group,Sanction)]) // prohibition format
    ).
    
%agents group norms from RA
norm(
    group_task(a1),
    a1, // the subject agent
    ( pursuer(a1), groupcoin(X,Y)), // precondition - add triggering condition
    obligation([west(X,Y,a1)],now+15,[reduce(a1, Sanction)]) // prohibition format
    ).  
    
norm(
    group_task(a2),
    a2, // the subject agent
    ( pursuer(a2), groupcoin(X,Y)), // precondition - add triggering condition
    obligation([east(X,Y,a2)],now+15,[reduce(a2, Sanction)]) // prohibition format
    ).  

norm(
    group_task(a3),
    a3, // the subject agent
    ( pursuer(a3), groupcoin(X,Y)), // precondition - add triggering condition
    obligation([north(X,Y,a3)],now+15,[reduce(a3, Sanction)]) // prohibition format
    ). 
    
norm(
    group_task(a4),
    a4, // the subject agent
    ( pursuer(a4), groupcoin(X,Y)), // precondition - add triggering condition
    obligation([south(X,Y,a4)],now+15,[reduce(a4, Sanction)]) // prohibition format
    ). 
    
    
%original norms    

    
pursuer(a1).
pursuer(a2).
pursuer(a3).
pursuer(a4).
ra(ra).
truck(t1).
group(group).
groupnorm(ra).

movable(A) :- agent(A).
movable(A) :- truck(A).

controller(c1).

coordinator(c2).

points(a1,1000).
points(a2,1000).
points(a3,1000).
points(a4,1000).
points(c1,1000).
points(t1,1000).

time_past(Time):- clock(Now), Now > Time.
time_since(Time):- clock(Now), Time > Now.

not_area(X,Y):-
	X is 20, int(Y), Y > 0, Y < 20;
	
not_area(X,Y):-
	Y is 20, int(X), X > 0, X < 20;

area(X,Y):-
	int(X), int(Y), X > 0, Y > 0, X < 21, Y < 21.
	
water(15,15).
water(15,16).
water(16,15).
water(16,16).

east(X,Y,EX,Y) :- EX is X + 1.
west(X,Y,EX,Y) :- EX is X - 1.
north(X,Y,X,EY) :- EY is Y + 1.
south(X,Y,X,EY) :- EY is Y - 1.

groupnorm(ra).

east(X,Y,A) :- EX is X + 1, at(EX,Y,A).
west(X,Y,A) :- EX is X - 1, at(EX,Y,A).
north(X,Y,A) :- EY is Y + 1, at(X,EY,A).
south(X,Y,A) :- EY is Y - 1, at(X,EY,A).

surround(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	reading(East,Y),
	reading(West,Y),
	reading(X,North),
	reading(X,South).
	
reading(X,Y):- reading(X,Y,_,_,_);

makeGroupReading(X,Y) :-
	East is X + 1, North is Y + 1, West is X - 1, South is Y - 1,
	makeReading(East,Y),
	makeReading(West,Y),
	makeReading(X,North),
	makeReading(X,South).

tooFar(AX, AY, X, Y) :- false.

do_sanction([not(H)|T]):- retract(H),do_sanction(T).
do_sanction([H|T]):- uniqueassertz(H),do_sanction(T).
do_sanction([]).

do_reduce_health(Agent,P):- 
   points(Agent, Health),
   NewHealth is Health - P,
   clock(Now),
   @external(geoSenseMW,write(points(Agent,Now,NewHealth),-1),_).

listTrue(_).
listTrue([H|T]):- H, listTrue(T).
listTrue([]).

clock(0).



Effects:
{true} tuple_space_changed {true} // causes compliance checking

{clock(Old)} time(New) {not clock(Old), clock(New)}
{true} time(X) {clock(X)}

//{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {not at(X1,Y1,Agent), at(X,Y,Agent), at(X,Y,Agent,Clock), not coin(X,Y)}
//change to receive clock as well!!!!
{at(X1,Y1,Agent)} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock)} 
{true} position(Agent, cell(X,Y), Clock) {at(X,Y,Agent,Clock), at(X,Y,Agent)}

{reading(X,Y,Value1,Agent,Clock1)} reading(Agent, cell(X,Y), Value, Clock) {not reading(X,Y,Value1,Agent,Clock1), reading(X,Y,Value,Agent,Clock)}
{true} reading(Agent, cell(X,Y), Value, Clock) { reading(X,Y,Value,Agent,Clock)}

{true} coin(cell(X,Y), Clock, Agent) {coin(X,Y)}

{true} cargo(cell(X,Y), Clock) {cargo(X,Y)}

{points(Agent,OldValue)} points(Agent, Clock, Value) {not points(Agent,OldValue), points(Agent,Value)}
{true} points(Agent, Clock, Value) {points(Agent,Value)}



Temporal norms:
agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)): 
	[norm(Label,Agent,Pre,obligation(ListA,Deadline,Sanction)) and Pre, 
	O(listTrue(ListA)), 
	time_past(Deadline)]

agent_directed(Label,Agent,prohibition(ListA,Sanction)): 
	[norm(Label,Agent,Pre,prohibition(ListA,Sanction)) and Pre, 
	F(listTrue(ListA)), 
	false]

Sanction rules:
reduce(Agent,X) and do_reduce_health(Agent,X) => not reduce(Agent,X).

viol(agent_directed(Label,Agent,prohibition(State,Sanction))) and do_sanction(Sanction) => not viol(agent_directed(Label,Agent,prohibition(State,Sanction))).
obey(agent_directed(Label,Agent,Deontic)) => not obey(agent_directed(Label,Agent,Deontic)).
